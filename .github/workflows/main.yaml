name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

  
    # Setup Java 17 to be default (sonar-scanner requirement as of 5.x)
    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=vprofile-actions1986_vproapp25

    - name: Checkstyle
      run: mvn checkstyle:checkstyle

      # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
          pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  BUILD_AND_PUSH_IMAGE:
      needs: Testing
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build and push the image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          context: ./
          file: ./Dockerfile
          daemon_off: false
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{secrets.REGISTRY}}
          region: ${{ env.AWS_REGION }}
          repo: ${{ env.ECR_REPOSITORY }}
          tags: latest, ${{github.run_number}}